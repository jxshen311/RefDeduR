if (is.na(yes_year)) {
if ( is.na(yes_journal) | yes_journal ) {
print("check")
index_pair$decision[ii] <- "check"
} else {
print("not_dup")
index_pair$decision[ii] <- "not duplicate"
}
} else if (yes_year) {
if ( is.na(yes_journal) | !yes_journal ) {
print("not_dup")
index_pair$decision[ii] <- "not duplicate"
} else {
print("check")
index_pair$decision[ii] <- "check"
}
} else {
print("not_dup")
index_pair$decision[ii] <- "not duplicate"
}
}
}
}
# Treat different scenarios ----
# if decision == check
# can call revtools shiny app for visulization, but don't modify directly using revtools
index_pair$decision_manual <- index_pair$decision
# * if decision_manual == "not duplicate", do nothing
# * if decision_manual == "duplicate", delete record of partition-Var2
for (ii in which(index_pair$decision_manual == "duplicate")) {
partition <- index_pair$partition[ii]
Var1 <- index_pair$Var1[ii]
Var2 <- index_pair$Var2[ii]
if (any(grepl("xiv|preprint", c(ls_b4[[partition]]$journal_norm[Var1]), ignore.case = T)) | any(grepl("conference", ls_b4[[partition]][Var1, which(colnames(ls_b4[[partition]]) %in% c("booktitle", "publisher", "note"))], ignore.case = T))) {
ls_b4[[partition]] <- ls_b4[[partition]][-Var1, ]
} else if (any(grepl("xiv|preprint", c(ls_b4[[partition]]$journal_norm[Var2]), ignore.case = T)) | any(grepl("conference", ls_b4[[partition]][Var2, which(colnames(ls_b4[[partition]]) %in% c("booktitle", "publisher", "note"))], ignore.case = T))){
ls_b4[[partition]] <- ls_b4[[partition]][-Var2, ]
} else if (any(is.na(ls_b4[[partition]]$year[c(Var1, Var2)]))){
if (is.na(ls_b4[[partition]]$year[c(Var2)])) {
ls_b4[[partition]] <- ls_b4[[partition]][-Var2, ]
} else {
ls_b4[[partition]] <- ls_b4[[partition]][-Var1, ]  # if both NA, remove Var2
}
} else if (ls_b4[[partition]]$year[Var1] >= ls_b4[[partition]]$year[Var2]) {
ls_b4[[partition]] <- ls_b4[[partition]][-Var2, ]
} else {
ls_b4[[partition]] <- ls_b4[[partition]][-Var1, ]
}
}
b5 <- do.call("rbind", ls_b4)
# partition (author not NA) ----
# 3830 has author; 3 do not have author
b4_no_author <- b4[is.na(b4$author), ]
b5 <- select(b5, -partition)
View(b4_no_author)
b5 <- select(b5, -id, -partition)
b5 <- select(b5, -id)
b4_no_author <- select(b4_no_author, -partition)
View(b3_simi)
View(b4_no_author)
View(b5)
tail(rownames(b5))
rownames(b5)[3028]
rownames(b5)[3828]
rownames(b5) <- NULL
tail(rownames(b5))
rownames(b4_no_author)
rownames(b4_no_author) <- NULL
rownames(b4_no_author)
# For the 3 records that do not have author, calculate similarity against all that remain ----
ls_b4_no_author_sim <- list()
View(simi_edit_pairwise)
stringsimmatrix(b4_no_author$title_norm[1], b5$title_norm, method = "lv")
t1 <- stringsimmatrix(b4_no_author$title_norm[1], b5$title_norm, method = "lv")
class(t1)
dim(t1)
t2 <- data.frame(as.table(simi_matrix)
)
t2 <- data.frame(as.table(t1))
View(t2)
t1 <- stringsimmatrix(b5$title_norm,b4_no_author$title_norm[1], method = "lv")
t2 <- data.frame(as.table(t1))
t1[lower.tri(t1, diag = TRUE)] <- NA
t2 <- na.omit(data.frame(as.table(simi_matrix)))
t2 <- na.omit(data.frame(as.table(t1)))
View(t2)
t1 <- stringsimmatrix(b4_no_author$title_norm[1], b5$title_norm,  method = "lv")
t1[lower.tri(t1, diag = TRUE)] <- NA
t2 <- na.omit(data.frame(as.table(t1)))
View(t2)
View(t1)
colnames(t1)
names(t1)
name(t1)
t2 <- melt(t1)
library(reshape2)
t2 <- melt(t1)
View(t2)
# test ----
t1 <- stringsimmatrix(ls_b4[[2]]$title_norm, method = "lv")
View(t1)
t1[lower.tri(t1, diag = TRUE)] <- NA
View(t1)
t2 <- melt(t1)
View(t2)
t2 <- na.omit(melt(t1))
t3 <- na.omit(data.frame(as.table(t1)))
View(t3)
t1 <- stringsimmatrix(b4_no_author$title_norm[1], b5$title_norm,  method = "lv")
t1[lower.tri(t1, diag = TRUE)] <- NA
t2 <- na.omit(melt(t1))
View(t2)
t2 <- na.omit(as.data.frame(as.table(t1)))
View(t2)
t2 <- na.omit(melt(t1))
View(t2)
ii <- 1
temp_simi_ti <- stringsimmatrix(b4_no_author$title_norm[ii], b5$title_norm,  method = "lv")
temp_simi_ti <- melt(temp_simi_ti)
View(temp_simi_ti)
colnames(temp_simi_ti)[colnames(temp_simi_ti) == "value"] <- "title_simi"
# * calculate title and abstract similarity ----
for (ii in 1:nrow(b4_no_author)){
temp_simi_ti <- stringsimmatrix(b4_no_author$title_norm[ii], b5$title_norm,  method = "lv")
temp_simi_ti <- melt(temp_simi_ti)
colnames(temp_simi_ti)[colnames(temp_simi_ti) == "value"] <- "title_simi"
temp_simi_ab <- stringsimmatrix(b4_no_author$abstract_norm[ii], b5$abstract_norm,  method = "lv")
temp_simi_ab <- melt(temp_simi_ab)
colnames(temp_simi_ab)[colnames(temp_simi_ab) == "value"] <- "abstract_simi"
ls_b4_no_author_sim[[ii]] <- full_join(temp_simi_ti, temp_simi_ab, by = c("Var1", "Var2"))
}
View(ls_b4_no_author_sim)
View(ls_b4_no_author_sim[[1]])
index_pair_no_author <- data.frame()
for (ii in 1:nrow(b4_no_author)){
count <- sum((is.na(ls_b4_no_author_sim[[ii]]$abstract_simi) & ls_b4_no_author_sim[[ii]]$title_simi >= 0.7)  |  ls_b4_no_author_sim[[ii]]$title_simi >= 0.7  |   (!is.na(ls_b4_no_author_sim[[ii]]$abstract_simi) & ls_b4_no_author_sim[[ii]]$abstract_simi >= 0.7))
if (count > 0) {
temp <- ls_b4_no_author_sim[[ii]][which((is.na(ls_b4_no_author_sim[[ii]]$abstract_simi) & ls_b4_no_author_sim[[ii]]$title_simi >= 0.7)  |  ls_b4_no_author_sim[[ii]]$title_simi >= 0.7  |   (!is.na(ls_b4_no_author_sim[[ii]]$abstract_simi) & ls_b4_no_author_sim[[ii]]$abstract_simi >= 0.7)), c("Var1", "Var2")]
index_pair_no_author <- rbind(index_pair_no_author, temp)
}
}
count <- integer()
for (ii in 1:nrow(b4_no_author)){
count[ii] <- sum((is.na(ls_b4_no_author_sim[[ii]]$abstract_simi) & ls_b4_no_author_sim[[ii]]$title_simi >= 0.7)  |  ls_b4_no_author_sim[[ii]]$title_simi >= 0.7  |   (!is.na(ls_b4_no_author_sim[[ii]]$abstract_simi) & ls_b4_no_author_sim[[ii]]$abstract_simi >= 0.7))
}
b4_inter <- do.call("rbind", ls_b4)
rownames(b5) <- NULL
rownames(b4_inter) <- NULL
b4_inter <- select(b4_inter, -id, -partition)
# combine b4_no_author with b5 ----
b5 <- rbind(b4_inter, b4_no_author)
rownames(b5) <- NULL
revtools::write_bibliography(b5, "dedu_develop_check/b5.ris", format = "ris")  # output .ris
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/jiaxianshen/OneDrive - Northwestern University/Documents/meta-analysis/2_recruit_study/search_combine_20220110")
library(revtools)
library(synthesisr)
library(stringdist)
library(RecordLinkage)
library(tibble)
library(plyr)
library(dplyr)  # For data manipulation
library(ggplot2)  # For data visualisation
library(Cairo)
library(openxlsx) # handle xlsx files
library(tidyr)
library(rstatix)
library(ggpubr)
library(litsearchr)
library(ggraph)
library(igraph)
library(readr)
library(stringr)
library(tm)
library(reshape2)
library(qualV)
# F: remove everything from the last "string_detect" on ----
remove_from_on <- function(string_detect, text){
result <- gsub(paste0("(.*)\\b", string_detect, "\\b.*"), "\\1", text, ignore.case = FALSE)
return(result)
}
# F: similarity based on edit distance between 2 strings ----
# If both NA, return NA.
simi_edit_dis <- function(a, b){
simi <-  1 - (as.numeric(adist(x = a, y = b)) / max(nchar(a), nchar(b)))
return(simi)
}
# F: extract 1st letter of each word and delete all the other characters ----
extract_prefix <- function(string){
prefix <- gsub('\\b(\\w)\\w*|.','\\U\\1', string, perl = TRUE)
return(prefix)
}
# F: pairwise similarity based on edit distance in a list of strings ----
simi_edit_pairwise <- function(data, column_name){
simi_matrix <- stringsimmatrix(data, method = "lv")
simi_matrix[lower.tri(simi_matrix, diag = TRUE)] <- NA
simi_matrix_df <- na.omit(data.frame(as.table(simi_matrix)))
colnames(simi_matrix_df)[colnames(simi_matrix_df) == "Freq"] <- column_name
return(simi_matrix_df)
}
#...............................................................................
#' standard tm commands; as reference
# titles<-removePunctuation(titles)
# titles<-stripWhitespace(titles)
# titles<-tolower(titles)
#...............................................................................
revtools::write_bibliography(b5, "dedu_develop_check/b5.ris", format = "ris")  # output .ris
View(index_pair_no_author)
is.na(b5$year)
sum(is.na(b5$year))
rm(t1,t2,t3)
rm(test)
test
sum(is.na(b5$year))
save.image("~/Documents/HartmannLab/surface_metagenome_project/deduplication/dedu_develop_20220301.RData")
class(b5$year)
b5_f1 <- filter(b5, year >= 2010)
sum(is.na(b5_f1$year))
b5_f1 <- filter(b5, year >= 2010 | is.na(year))
sum(is.na(b5_f1$year))
revtools::write_bibliography(b5, "dedu_develop_check/b5.ris", format = "bib")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/jiaxianshen/OneDrive - Northwestern University/Documents/meta-analysis/2_recruit_study/search_combine_20220110")
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/jiaxianshen/OneDrive - Northwestern University/Documents/meta-analysis/2_recruit_study/search_combine_20220110")
getwd()
library(revtools)
library(synthesisr)
library(stringdist)
library(RecordLinkage)
library(tibble)
library(plyr)
library(dplyr)  # For data manipulation
library(ggplot2)  # For data visualisation
library(Cairo)
library(openxlsx) # handle xlsx files
library(tidyr)
library(rstatix)
library(ggpubr)
library(litsearchr)
library(ggraph)
library(igraph)
library(readr)
library(stringr)
library(tm)
library(reshape2)
library(qualV)
# F: remove everything from the last "string_detect" on ----
remove_from_on <- function(string_detect, text){
result <- gsub(paste0("(.*)\\b", string_detect, "\\b.*"), "\\1", text, ignore.case = FALSE)
return(result)
}
# F: similarity based on edit distance between 2 strings ----
# If both NA, return NA.
simi_edit_dis <- function(a, b){
simi <-  1 - (as.numeric(adist(x = a, y = b)) / max(nchar(a), nchar(b)))
return(simi)
}
# F: extract 1st letter of each word and delete all the other characters ----
extract_prefix <- function(string){
prefix <- gsub('\\b(\\w)\\w*|.','\\U\\1', string, perl = TRUE)
return(prefix)
}
# F: pairwise similarity based on edit distance in a list of strings ----
simi_edit_pairwise <- function(data, column_name){
simi_matrix <- stringsimmatrix(data, method = "lv")
simi_matrix[lower.tri(simi_matrix, diag = TRUE)] <- NA
simi_matrix_df <- na.omit(data.frame(as.table(simi_matrix)))
colnames(simi_matrix_df)[colnames(simi_matrix_df) == "Freq"] <- column_name
return(simi_matrix_df)
}
#...............................................................................
#' standard tm commands; as reference
# titles<-removePunctuation(titles)
# titles<-stripWhitespace(titles)
# titles<-tolower(titles)
#...............................................................................
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/jiaxianshen/OneDrive - Northwestern University/Documents/meta-analysis/2_recruit_study/search_combine_20220110")
library(revtools)
library(synthesisr)
library(stringdist)
library(RecordLinkage)
library(tibble)
library(plyr)
library(dplyr)  # For data manipulation
library(ggplot2)  # For data visualisation
library(Cairo)
library(openxlsx) # handle xlsx files
library(tidyr)
library(rstatix)
library(ggpubr)
library(litsearchr)
library(ggraph)
library(igraph)
library(readr)
library(stringr)
library(tm)
library(reshape2)
library(qualV)
# F: remove everything from the last "string_detect" on ----
remove_from_on <- function(string_detect, text){
result <- gsub(paste0("(.*)\\b", string_detect, "\\b.*"), "\\1", text, ignore.case = FALSE)
return(result)
}
# F: similarity based on edit distance between 2 strings ----
# If both NA, return NA.
simi_edit_dis <- function(a, b){
simi <-  1 - (as.numeric(adist(x = a, y = b)) / max(nchar(a), nchar(b)))
return(simi)
}
# F: extract 1st letter of each word and delete all the other characters ----
extract_prefix <- function(string){
prefix <- gsub('\\b(\\w)\\w*|.','\\U\\1', string, perl = TRUE)
return(prefix)
}
# F: pairwise similarity based on edit distance in a list of strings ----
simi_edit_pairwise <- function(data, column_name){
simi_matrix <- stringsimmatrix(data, method = "lv")
simi_matrix[lower.tri(simi_matrix, diag = TRUE)] <- NA
simi_matrix_df <- na.omit(data.frame(as.table(simi_matrix)))
colnames(simi_matrix_df)[colnames(simi_matrix_df) == "Freq"] <- column_name
return(simi_matrix_df)
}
#...............................................................................
#' standard tm commands; as reference
# titles<-removePunctuation(titles)
# titles<-stripWhitespace(titles)
# titles<-tolower(titles)
#...............................................................................
getwd()
getwd()
revtools::write_bibliography(b5, "dedu_develop_check/b5.ris", format = "bib")
revtools::write_bibliography(b5, "dedu_develop_check/b5.ris", format = "ris")
revtools::write_bibliography(b5, "dedu_develop_check/b5.bib", format = "bib")
save(b5, file = "dedu_develop_check/b5.RData")
save(b, b1, b2, b3, b4, file = "dedu_develop_check/b~b4.RData")
save(b_pubmed, b_scopus, b_wos, file = "dedu_develop_check/b_database.RData")
df <- tibble(id = 1:4, w = runif(4), x = runif(4), y = runif(4), z = runif(4))
library(dplyr)
df <- tibble(id = 1:4, w = runif(4), x = runif(4), y = runif(4), z = runif(4))
View(df)
df %>%
rowwise() %>%
mutate(
sum = sum(c_across(w:z)),
sd = sd(c_across(w:z))
)
df1 <- df %>%
rowwise() %>%
mutate(
sum = sum(c_across(w:z)),
sd = sd(c_across(w:z))
)
View(df1)
df2 <- df %>%
mutate(
sum = sum(c_across(w:z)),
sd = sd(c_across(w:z))
)
View(df2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/jiaxianshen/OneDrive - Northwestern University/Documents/meta-analysis/2_recruit_study/search_combine_20220110")
library(revtools)
library(synthesisr)
library(stringdist)
library(RecordLinkage)
library(tibble)
library(plyr)
library(dplyr)  # For data manipulation
library(ggplot2)  # For data visualisation
library(Cairo)
library(openxlsx) # handle xlsx files
library(tidyr)
library(rstatix)
library(ggpubr)
library(litsearchr)
b_pubmed <- read_bibliography("search_combine_20220110_pubmed_unaccent.bib")
View(b_pubmed)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/jiaxianshen/Documents/GitHub/RefDeduR/develop")
library(revtools)
# library(synthesisr)
library(stringdist)
library(RecordLinkage)
library(tibble)
# library(plyr)
library(dplyr)  # For data manipulation
library(ggplot2)  # For data visualisation
library(Cairo)
library(openxlsx) # handle xlsx files
library(tidyr)
library(rstatix)
library(ggpubr)
library(ggraph)
install.packages("farver")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/jiaxianshen/Documents/GitHub/RefDeduR/develop")
library(revtools)
# library(synthesisr)
library(stringdist)
library(RecordLinkage)
library(tibble)
# library(plyr)
library(dplyr)  # For data manipulation
library(ggplot2)  # For data visualisation
library(Cairo)
library(openxlsx) # handle xlsx files
library(tidyr)
library(rstatix)
library(ggpubr)
library(ggraph)
library(ggraph)
install.packages("farver")
library(ggraph)
library(igraph)
library(readr)
library(stringr)
library(tm)
library(reshape2)
library(qualV)
library(tictoc)
# F: remove everything from the last "string_detect" on ----
remove_from_on <- function(string_detect, text){
result <- gsub(paste0("(.*)\\b", string_detect, "\\b.*"), "\\1", text, ignore.case = FALSE)
return(result)
}
# F: similarity based on edit distance between 2 strings ----
# If both NA, return NA.
simi_edit_dis <- function(a, b){
simi <-  1 - (as.numeric(adist(x = a, y = b)) / max(nchar(a), nchar(b)))
return(simi)
}
# F: extract 1st letter of each word and delete all the other characters ----
extract_prefix <- function(string){
prefix <- gsub('\\b(\\w)\\w*|.','\\U\\1', string, perl = TRUE)
return(prefix)
}
# F: pairwise similarity based on edit distance in a list of strings ----
simi_edit_pairwise <- function(data, column_name){
simi_matrix <- stringsimmatrix(data, method = "lv")
simi_matrix[lower.tri(simi_matrix, diag = TRUE)] <- NA
simi_matrix_df <- na.omit(data.frame(as.table(simi_matrix)))
colnames(simi_matrix_df)[colnames(simi_matrix_df) == "Freq"] <- column_name
return(simi_matrix_df)
}
#...............................................................................
#' standard tm commands; as reference
# titles<-removePunctuation(titles)
# titles<-stripWhitespace(titles)
# titles<-tolower(titles)
#...............................................................................
```{r}
getwd()
## Make test data available
data(ad.test)
n
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/jiaxianshen/Documents/GitHub/RefDeduR/")
library(revtools)
library(synthesisr)
library(stringdist)
library(RecordLinkage)
library(tibble)
library(dplyr)  # For data manipulation
library(ggplot2)  # For data visualisation
library(Cairo)
library(openxlsx) # handle xlsx files
library(tidyr)
library(rstatix)
library(ggpubr)
library(ggraph)
library(igraph)
library(readr)
library(stringr)
library(tm)
library(reshape2)
library(qualV)
library(tictoc)  # to measure running time of codes
# F: remove everything from the last "string_detect" on ----
remove_from_on <- function(string_detect, text){
result <- gsub(paste0("(.*)\\b", string_detect, "\\b.*"), "\\1", text, ignore.case = FALSE)
return(result)
}
# F: similarity based on edit distance between 2 strings ----
# If both NA, return NA.
simi_edit_dis <- function(a, b){
simi <-  1 - (as.numeric(adist(x = a, y = b)) / max(nchar(a), nchar(b)))
return(simi)
}
# F: extract 1st letter of each word and delete all the other characters ----
extract_prefix <- function(string){
prefix <- gsub('\\b(\\w)\\w*|.','\\U\\1', string, perl = TRUE)
return(prefix)
}
# F: pairwise similarity based on edit distance in a list of strings ----
simi_edit_pairwise <- function(data, column_name){
simi_matrix <- stringsimmatrix(data, method = "lv")
simi_matrix[lower.tri(simi_matrix, diag = TRUE)] <- NA
simi_matrix_df <- na.omit(data.frame(as.table(simi_matrix)))
colnames(simi_matrix_df)[colnames(simi_matrix_df) == "Freq"] <- column_name
return(simi_matrix_df)
}
#...............................................................................
#' standard tm commands; as reference
# titles<-removePunctuation(titles)
# titles<-stripWhitespace(titles)
# titles<-tolower(titles)
#...............................................................................
getwd()
