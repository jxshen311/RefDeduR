% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fuzzy_calculate_similarity.R
\name{simi_order_df}
\alias{simi_order_df}
\title{Calculate string similarity between adjacent rows}
\usage{
simi_order_df(df, order_by = "title_norm")
}
\arguments{
\item{df}{A data frame with bibliographic information that has gone through text normalization. \code{df} must have the following columns \code{c("author", "title", "journal", "abstract", "year", "doi", "title_norm", "author_norm", "abstract_norm", "first_author_last_name_norm")}.}

\item{order_by}{Quoted name of the column by which to order the rows. Defaults to \code{"title_norm"}.}
}
\value{
A data frame with string similarity results for \code{"title_norm"}, \code{"author_norm"}, \code{"abstract_norm"}, and \code{"first_author_last_name_norm"}.
}
\description{
The function calculates similarity based on Levenshtein edit distance for columns \code{"title_norm"}, \code{"author_norm"}, \code{"abstract_norm"}, and \code{"first_author_last_name_norm"} between adjacent rows. Range of similarity is [0, 1]. \code{Similarity == 1} means 100\% identical while \code{Similarity == 0} means completely different.
}
\details{
This function is based on the assumption that all records have titles.

Computing time estimation according to past experience: ~ 47 sec for a data frame with 3837 rows on a Macbook Pro (Apple M1 Pro chip, memory: 16 GB).
}
\examples{
# load example dataset
data(bib_example_small)

# text normalization of the data frame
df <- norm_df(bib_example_small)

# calculate similarity
df_simi <- simi_order_df(df, order_by = "title_norm")
# df_simi[1, ] stores similarity results between df[1, ] and df[2, ]

}
